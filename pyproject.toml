[build-system]
requires = [
    "setuptools",
    "ruff"
]
build-backend = "setuptools.build_meta"

[project]
name = "MAPIE"
version = "1.1.0"
description = "A scikit-learn-compatible module for estimating prediction intervals."
readme = "README.rst"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
maintainers = [
    {name = "Valentin Laurent", email = "valentin.laurent@capgemini.com"},
    {name = "Thibault Cordier", email = "thibault.a.cordier@capgemini.com"},
    {name = "Louis Lacombe", email = "louis.lacombe@capgemini.com"},
    {name = "Vincent Blot", email = "vincent.blot@capgemini.com"},
]
requires-python = ">=3.9"
dependencies = [
    "scikit-learn>=1.4",
    "scipy",
    "numpy>=1.23"
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]

[project.urls]
Homepage = "https://github.com/scikit-learn-contrib/MAPIE"
Documentation = "https://mapie.readthedocs.io/en/latest/"
Repository = "https://github.com/scikit-learn-contrib/MAPIE"
Issues = "https://github.com/scikit-learn-contrib/MAPIE/issues"
Changelog = "https://github.com/scikit-learn-contrib/MAPIE/releases"
DOWNLOAD = "https://pypi.org/project/MAPIE/#files"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["mapie", "mapie.*"]

[tool.ruff]
# Exclude ignored directories.
exclude = [
    ".coverage",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "_templates",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "list",
    "doc/conf.py"
]

line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["COM812"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Ignore notebooks
exclude = ["*.ipynb"]

# Use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
# Ignores multiple statements on one line in notebooks
"*.ipynb" = ["E702"]
